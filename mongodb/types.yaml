# Ystia Forge
# Copyright (C) 2018 Bull S. A. S. - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
#
# The original implementation is from Ystia Forge, Open Telekom Cloud implements replication and authentication.

tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.ystia.mongodb.linux.ansible
  template_version: 1.0.2
  template_author: Ystia

description: Deploy MongoBD using ansible role from https://github.com/UnderGreen/ansible-role-mongodb

imports:
  - tosca-normative-types:1.0.0-ALIEN20

data_types:
  NormalUsers:
    derived_from: tosca.datatypes.Root
    properties:
      name:
        type: string
        required: true
        description: Example 'testUser'
      password:
        type: string
        required: true
        description: Example 'passw0rd'
      roles:
        type: string
        description: Example 'readWrite'
        required: true
      database:
        type: string
        description: Example 'app_development'
        required: true

node_types:
  otc.nodes.SoftwareComponent.MongoDB:
    derived_from: tosca.nodes.SoftwareComponent
    tags:
      icon: /images/mongodb.jpg
    attributes:
      url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port] ] }
    properties:
      component_version:
        type: version
        description: Version of the installed MongoDB component
        default: 4.2
        constraints:
          - valid_values: [3.6,4.0,4.2,4.4]
      db_path:
        type: string
        description: Path of the database
        default: /var/lib/mongo
        required: true
      disable_transparent_hugepages:
        type: boolean
        description: Disable transparent hugepages on systemd debian based installations.
        default: false
        required: false
      use_numa:
        type: boolean
        description: Enable or disable NUMA support.
        default: true
        required: false
      net_ipv6:
        type: boolean
        description: Enable IPv6 support (disabled by default)
        default: false
        required: false
      net_maxconns:
        type: integer
        description: Max number of simultaneous connections
        default: 65536
        required: false
      net_http_enabled:
        type: boolean
        description: Enable or disable http interface.
        default: false
        required: false
      storage_quota_enforced:
        type: boolean
        description: Limits each database to a certain number of files
        default: false
        required: false
      storage_quota_maxfiles:
        type: integer
        description: Number of quota files per DB
        default: 8
        required: false
      storage_smallfiles:
        type: boolean
        description: >
          Set to true reduce the initial size for data files and limits the maximum size to 512 megabytes.
          Use smallfiles if you have a large number of databases that each holds a small quantity of data.
        default: false
        required: false
      storage_journal_enabled:
        type: boolean
        description: Enable journaling
        default: true
        required: false
      storage_prealloc:
        type: boolean
        description: Set to true to disable data file preallocation
        default: true
        required: false
      wiredtiger_cache_size:
        type: integer
        description: Cache size for wiredTiger in GB
        default: 1
        required: false
    capabilities:
      mongo_db:
        type: tosca.capabilities.Endpoint.Database
        properties:
          port: 27017

  otc.nodes.SoftwareComponent.MongoDBPrimary:
    derived_from: otc.nodes.SoftwareComponent.MongoDB
    description: Use this node to install a MongoDB primary on init, config replication, and user access control.
    properties:
      security_authorization:
        type: string
        description: >
          Disable or enable access control. Possible values: 'disabled', 'enabled'.
          Enabling access control on a MongoDB requires users to identify themselves and users can only perform actions as determined by their roles.
        default: disabled
        constraints:
          - valid_values: ['disabled', 'enabled']
        required: false
      mongodb_users:
        type: list
        entry_schema:
          type: NormalUsers
        description: When 'security_authorization' is enabled, create normal users with the given roles.
        default: []
        required: false
      user_admin_name:
        type: string
        description: When 'security_authorization' is enabled, create the given user with the role 'userAdminAnyDatabase'.
        default: siteUserAdmin
        required: false
      user_admin_password:
        type: string
        description: User admin password
        default: passw0rd
        required: false
      root_admin_name:
        type: string
        description: When 'security_authorization' is enabled, create the given user with the role 'root'.
        default: siteRootAdmin
        required: false
      root_admin_password:
        type: string
        description: Root admin password
        default: passw0rd
        required: false
      root_backup_name:
        type: string
        description: When 'security_authorization' is enabled, create the given user with the roles 'backup' and 'clusterMonitor'.
        default: backupuser
        required: false
      root_backup_password:
        type: string
        description: Root backup password
        default: passw0rd
        required: false
      replication_replset:
        type: string
        description: >
          Specify a name for the replication set to enable replication (e.g., 'rs0').
          To add additional secondary to the replication set, use the MongoDBSecondary component and connect it to this primary node using the 'join_primary' relationship.
        required: false
      replication_keyfile_content:
        type: string
        description: >
          When replication is enabled, each mongod instances in the replica set uses the contents of the keyfile as the shared password for authenticating other members in the deployment.
          Must regenerate this file on production environment with command 'openssl rand -base64 741'
        default: |
          8pYcxvCqoe89kcp33KuTtKVf5MoHGEFjTnudrq5BosvWRoIxLowmdjrmUpVfAivh
          CHjqM6w0zVBytAxH1lW+7teMYe6eDn2S/O/1YlRRiW57bWU3zjliW3VdguJar5i9
          Z+1a8lI+0S9pWynbv9+Ao0aXFjSJYVxAm/w7DJbVRGcPhsPmExiSBDw8szfQ8PAU
          2hwRl7nqPZZMMR+uQThg/zV9rOzHJmkqZtsO4UJSilG9euLCYrzW2hdoPuCrEDhu
          Vsi5+nwAgYR9dP2oWkmGN1dwRe0ixSIM2UzFgpaXZaMOG6VztmFrlVXh8oFDRGM0
          cGrFHcnGF7oUGfWnI2Cekngk64dHA2qD7WxXPbQ/svn9EfTY5aPw5lXzKA87Ds8p
          KHVFUYvmA6wVsxb/riGLwc+XZlb6M9gqHn1XSpsnYRjF6UzfRcRR2WyCxLZELaqu
          iKxLKB5FYqMBH7Sqg3qBCtE53vZ7T1nefq5RFzmykviYP63Uhu/A2EQatrMnaFPl
          TTG5CaPjob45CBSyMrheYRWKqxdWN93BTgiTW7p0U6RB0/OCUbsVX6IG3I9N8Uqt
          l8Kc+7aOmtUqFkwo8w30prIOjStMrokxNsuK9KTUiPu2cj7gwYQ574vV3hQvQPAr
          hhb9ohKr0zoPQt31iTj0FDkJzPepeuzqeq8F51HB56RZKpXdRTfY8G6OaOT68cV5
          vP1O6T/okFKrl41FQ3CyYN5eRHyRTK99zTytrjoP2EbtIZ18z+bg/angRHYNzbgk
          lc3jpiGzs1ZWHD0nxOmHCMhU4usEcFbV6FlOxzlwrsEhHkeiununlCsNHatiDgzp
          ZWLnP/mXKV992/Jhu0Z577DHlh+3JIYx0PceB9yzACJ8MNARHF7QpBkhtuGMGZpF
          T+c73exupZFxItXs1Bnhe3djgE3MKKyYvxNUIbcTJoe7nhVMrwO/7lBSpVLvC4p3
          wR700U0LDaGGQpslGtiE56SemgoP
        required: false
      replication_oplogsize:
        type: integer
        description: Specify a maximum size in megabytes for the replication operation log.
        default: 1024
        required: false
    capabilities:
      primary:
        type: otc.capabilities.MongodbPrimaryOnInit
    interfaces:
      Standard:
        create:
          description: MongoDB installation step
          inputs:
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            MONGODB_VERSION: { get_property: [SELF, component_version] }
            MONGODB_PORT: { get_property: [SELF, mongo_db, port] }
            MONGODB_DB_PATH: { get_property: [SELF, db_path] }
            MONGODB_DISABLE_TRANSPARENT_HUGEPAGES: { get_property: [SELF, disable_transparent_hugepages] }
            MONGODB_USE_NUMA: { get_property: [SELF, use_numa] }
            MONGODB_NET_IPV6: { get_property: [SELF, net_ipv6] }
            MONGODB_NET_MAXCONNS: { get_property: [SELF, net_maxconns] }
            MONGODB_NET_HTTP_ENABLED: { get_property: [SELF, net_http_enabled] }
            MONGODB_STORAGE_QUOTA_ENFORCED: { get_property: [SELF, storage_quota_enforced] }
            MONGODB_STORAGE_QUOTA_MAXFILES: { get_property: [SELF, storage_quota_maxfiles] }
            MONGODB_STORAGE_SMALLFILES: { get_property: [SELF, storage_smallfiles] }
            MONGODB_STORAGE_JOURNAL_ENABLED: { get_property: [SELF, storage_journal_enabled] }
            MONGODB_STORAGE_PREALLOC: { get_property: [SELF, storage_prealloc] }
            MONGODB_WIREDTIGER_CACHE_SIZE: { get_property: [SELF, wiredtiger_cache_size] }
            MONGODB_SECURITY_AUTHORIZATION: { get_property: [SELF, security_authorization] }
            MONGODB_USERS: { get_property: [SELF, mongodb_users] }
            MONGODB_USER_ADMIN_NAME: { get_property: [SELF, user_admin_name] }
            MONGODB_USER_ADMIN_PASSWORD: { get_property: [SELF, user_admin_password] }
            MONGODB_ROOT_ADMIN_NAME: { get_property: [SELF, root_admin_name] }
            MONGODB_ROOT_ADMIN_PASSWORD: { get_property: [SELF, root_admin_password] }
            MONGODB_ROOT_BACKUP_NAME: { get_property: [SELF, root_backup_name] }
            MONGODB_ROOT_BACKUP_PASSWORD: { get_property: [SELF, root_backup_password] }
            MONGODB_REPLICATION_REPLSET: { get_property: [SELF, replication_replset] }
            MONGODB_REPLICATION_OPLOGSIZE: { get_property: [SELF, replication_oplogsize] }
            MONGODB_KEYFILE_CONTENT: { get_property: [SELF, replication_keyfile_content] }
          implementation: playbooks/mongodb_install_primary.yaml

  otc.nodes.SoftwareComponent.MongoDBSecondary:
    derived_from: otc.nodes.SoftwareComponent.MongoDB
    description: Use this node to install a MongoDB secondary on init. Requires connecting to a MongoDBPrimary node using 'join_primary'.
    properties:
      replication_host_type:
        type: string
        description: >
          Specify the replication host type for the secondary node. Possible values: 'replica', 'arbiter'.
        default: replica
        constraints:
          - valid_values: ['replica', 'arbiter']
    requirements:
      - join_primary:
          # requires connecting to one primary node
          capability: otc.capabilities.MongodbPrimaryOnInit
          relationship: otc.relationships.JoinMongodbPrimaryOninit
          # one secondary has exactly one primary
          occurrences: [1, 1]

relationship_types:
  otc.relationships.JoinMongodbPrimaryOninit:
    derived_from: tosca.relationships.ConnectsTo
    description: This relationship installs mongodb secondary and join the primary node on init
    # Valid target helps the editor to display the matching primary node.
    valid_target_types: [ otc.capabilities.MongodbPrimaryOnInit ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            IP_ADDRESS: { get_attribute: [SOURCE, private_address] }
            MONGODB_PRIMARY_IP: { get_attribute: [TARGET, private_address] }
            MONGODB_VERSION: { get_property: [SOURCE, component_version] }
            MONGODB_PORT: { get_property: [SOURCE, mongo_db, port] }
            MONGODB_DB_PATH: { get_property: [SOURCE, db_path] }
            MONGODB_DISABLE_TRANSPARENT_HUGEPAGES: { get_property: [SOURCE, disable_transparent_hugepages] }
            MONGODB_USE_NUMA: { get_property: [SOURCE, use_numa] }
            MONGODB_NET_IPV6: { get_property: [SOURCE, net_ipv6] }
            MONGODB_NET_MAXCONNS: { get_property: [SOURCE, net_maxconns] }
            MONGODB_NET_HTTP_ENABLED: { get_property: [SOURCE, net_http_enabled] }
            MONGODB_STORAGE_QUOTA_ENFORCED: { get_property: [SOURCE, storage_quota_enforced] }
            MONGODB_STORAGE_QUOTA_MAXFILES: { get_property: [SOURCE, storage_quota_maxfiles] }
            MONGODB_STORAGE_SMALLFILES: { get_property: [SOURCE, storage_smallfiles] }
            MONGODB_STORAGE_JOURNAL_ENABLED: { get_property: [SOURCE, storage_journal_enabled] }
            MONGODB_STORAGE_PREALLOC: { get_property: [SOURCE, storage_prealloc] }
            MONGODB_WIREDTIGER_CACHE_SIZE: { get_property: [SOURCE, wiredtiger_cache_size] }
            MONGODB_SECURITY_AUTHORIZATION: { get_property: [TARGET, security_authorization] }
            MONGODB_ROOT_ADMIN_NAME: { get_property: [TARGET, root_admin_name] }
            MONGODB_ROOT_ADMIN_PASSWORD: { get_property: [TARGET, root_admin_password] }
            MONGODB_REPLICATION_REPLSET: { get_property: [TARGET, replication_replset] }
            MONGODB_REPLICATION_OPLOGSIZE: { get_property: [TARGET, replication_oplogsize] }
            MONGODB_KEYFILE_CONTENT: { get_property: [TARGET, replication_keyfile_content] }
            MONGODB_REPLICATION_HOST_TYPE: { get_property: [SOURCE, replication_host_type] }
          implementation: playbooks/mongodb_install_secondary.yaml

capability_types:
  otc.capabilities.MongodbPrimaryOnInit:
    derived_from: tosca.capabilities.Root